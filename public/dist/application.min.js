"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ngMaterial","angularFileUpload","ng-mfb","gridshore.c3js.chart","btford.socket-io"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$mdThemingProvider",function($locationProvider,$mdThemingProvider){$locationProvider.hashPrefix("!"),$mdThemingProvider.theme("default").primaryPalette("green").accentPalette("brown",{"default":"300"})}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("models"),ApplicationConfiguration.registerModule("simulations"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","$location","$mdSidenav","$http","$mdDialog",function($scope,Authentication,$location,$mdSidenav,$http,$mdDialog){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.isSignin="/signin"===$location.path(),$scope.goHome=function(){$location.path("/")},$scope.editProfile=function(){$mdSidenav("right").toggle(),$location.path("/settings/profile")},$scope.updatePword=function(){$mdSidenav("right").toggle(),$location.path("/settings/password")},$scope.toggleRight=function(){$mdSidenav("right").toggle()},$scope.signout=function(){$mdSidenav("right").close(),$http.get("/auth/signout").success(function(response){$scope.authentication.user=null,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isSignin="/signin"===$location.path(),$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","$location",function($scope,Authentication,$location){$scope.authentication=Authentication,$scope.$on("$stateChangeSuccess",function(){$scope.authentication.user&&$location.path("/simulations")})}]),angular.module("core").directive("omHeader",function(){return{templateUrl:function(elem,attr){return"/modules/core/views/user-header.client.view.html"}}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Socket",["socketFactory",function(socketFactory){return socketFactory({prefix:"",ioSocket:io.connect("/")})}]),angular.module("models").run([function(){}]),angular.module("models").config(["$stateProvider",function($stateProvider){$stateProvider.state("listModels",{url:"/models",templateUrl:"modules/models/views/list-models.client.view.html"}).state("createModel",{url:"/models/create",templateUrl:"modules/models/views/create-model.client.view.html"}).state("viewModel",{url:"/models/:ModelId",templateUrl:"modules/models/views/view-model.client.view.html"}).state("editModel",{url:"/models/:modelId/edit",templateUrl:"modules/models/views/edit-model.client.view.html"})}]),angular.module("models").controller("ModelsController",["$scope","$stateParams","$location","Authentication","Models",function($scope,$stateParams,$location,Authentication,Models){$scope.authentication=Authentication,$scope.goToCreate=function(){$location.path("models/create")},$scope.create=function(){var modelJSON=JSON.parse($scope.modelJSON),model=new Models(modelJSON);model.$save(function(response){$location.path("models"),$scope.modelJSON=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(model){if(model){model.$remove();for(var i in $scope.models)$scope.models[i]===model&&$scope.models.splice(i,1)}else $scope.model.$remove(function(){$location.path("models")})},$scope.update=function(){var model=$scope.model;model.$update(function(){$location.path("models/"+model._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.models=Models.query()},$scope.findOne=function(){$scope.model=Models.get({modelId:$stateParams.modelId}),console.log($scope.model)}}]),angular.module("models").factory("Models",["$resource",function($resource){return $resource("models/:modelId",{modelId:"@_id"},{update:{method:"PUT"}})}]),angular.module("simulations").run([function(){}]),angular.module("simulations").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSimulations",{url:"/simulations",templateUrl:"modules/simulations/views/list-simulations.client.view.html"}).state("createSimulation",{url:"/models/create",templateUrl:"modules/simulations/views/create-simulation.client.view.html"}).state("viewSimulation",{url:"/simulations/:simulationId",templateUrl:"modules/simulations/views/view-simulation.client.view.html"}).state("analyzeSimulation",{url:"/simulations/:simulationId/analyze",templateUrl:"modules/simulations/views/analyze-simulation.client.view.html"}).state("editParamsSimulation",{url:"/simulations/:simulationId/edit/parameters",templateUrl:"modules/simulations/views/edit-params-simulation.client.view.html"}).state("editShocksSimulation",{url:"/simulations/:simulationId/edit/shocks",templateUrl:"modules/simulations/views/edit-shocks-simulation.client.view.html"}).state("runSimulation",{url:"/simulations/:simulationId/run",templateUrl:"modules/simulations/views/run-simulation.client.view.html"})}]),angular.module("simulations").controller("AnalyzeSimulationController",["$scope","$http","$mdDialog","$stateParams","$location","$anchorScroll","Authentication","Simulations","AnalyzeState",function($scope,$http,$mdDialog,$stateParams,$location,$anchorScroll,Authentication,Simulations,AnalyzeState){$scope.authentication=Authentication,$scope.selectedIndex=4,void 0===$stateParams.simulationId&&$location.path("/simulations"),$scope.per_row=3,$scope.findOne=function(){$scope.simulation=Simulations.get({simulationId:$stateParams.simulationId},function(){$scope.genRender(6,$scope.per_row);var i;$scope.grouped_sims=Simulations.query({},function(){for(i=0;i<$scope.grouped_sims.length;i++)$scope.simulation.model.name===$scope.grouped_sims[i].model&&($scope.all_sims=$scope.grouped_sims[i].simulations)}),$scope.curSim=$scope.simulation._id,AnalyzeState.per_row=3,AnalyzeState.active_vars=$scope.active_vars,AnalyzeState.json_data=$scope.json_data,AnalyzeState.data_columns=$scope.data_columns,AnalyzeState.all_vars=$scope.all_vars,AnalyzeState.sim_descriptions=$scope.sim_descriptions,$scope.breadcrumbs=[{title:"Simulations",link:"/#!/"},{title:$scope.simulation.name,link:"/#!/simulations/"+$scope.simulation._id}]})},$scope.invalidSim=function(ev){$mdDialog.show({templateUrl:"/modules/simulations/views/invalid-graph.client.view.html",targetEvent:ev})},$scope.active_var="",$scope.active_vars=[],$scope.createGraph=function(curvar){$scope.active_vars.push(curvar),$scope.genVars($scope.per_row),$mdDialog.cancel()},$scope.getColumn=function(input_str,color,id_num){return{id:input_str,type:"line",color:color}},$scope.vars=[],$scope.all_vars=[],$scope.json_data=[],$scope.data_columns=[],$scope.sim_descriptions={},$scope.renderGraphs=function(total_num,row_num){$http.get("/output/json/"+$stateParams.simulationId.toString()).success(function(raw_data){console.log($scope.curSim),$scope.simulation._id!==$scope.curSim?$scope.legend_on=!0:$scope.legend_on=!1,console.log($scope.legend_on);var cur_row=[],cur_obj={},graph_list=[],i=0;for(var curvar in raw_data){cur_obj={name:curvar,idnum:i},($scope.active_vars.length<total_num||curvar in $scope.active_vars)&&(0!==i&&i%row_num===0&&($scope.vars.push(cur_row),cur_row=[]),$scope.active_vars.length<total_num&&$scope.active_vars.push(curvar),cur_row.push(cur_obj)),i++,$scope.all_vars.push(cur_obj);for(var raw_len=raw_data[curvar].length,p=0;raw_len>p;p++)graph_list.push({x:p}),graph_list[p][$scope.simulation.name]=raw_data[curvar][p];$scope.json_data[curvar]=graph_list,$scope.data_columns[curvar]=[$scope.getColumn($scope.simulation.name,"brown",1)],graph_list=[]}$scope.vars.push(cur_row)}).error(function(data,status,headers,config){$scope.invalidSim()})},$scope.concatGraphs=function(simulation){$scope.simulation._id===simulation._id?$scope.renderGraphs($scope.active_vars.length,$scope.per_row):$http.get("/output/json/"+simulation._id.toString()).success(function(raw_data){var raw_len=0,temp=[];for(var curvar in raw_data){temp=[],raw_len=raw_data[curvar].length;for(var p=0;raw_len>p;p++)temp.push({x:p}),temp[p][$scope.simulation.name]=$scope.json_data[curvar][p][$scope.simulation.name],temp[p][simulation.name]=raw_data[curvar][p];$scope.json_data[curvar]=temp,$scope.data_columns[curvar]=[{id:$scope.simulation.name,type:"line","show-legend":!0,color:"brown"},$scope.getColumn(simulation.name,"green",2)]}}).error(function(data,status,headers,config){$scope.invalidSim()})},$scope.genVars=function(row_num){$scope.vars=[];for(var cur_row=[],cur_obj={},i=0;i<$scope.active_vars.length;i++)console.log($scope.active_vars[i]),cur_obj={name:$scope.active_vars[i],idnum:i},0!==i&&i%row_num===0&&($scope.vars.push(cur_row),cur_row=[]),cur_row.unshift(cur_obj);$scope.vars.unshift(cur_row)},$scope.genRender=function(total_num,row_num){if($scope.sim_descriptions!=={}){var param={};for(var i in $scope.simulation.model.endovars)param=$scope.simulation.model.endovars[i],$scope.sim_descriptions[param.name]={latex:param.latex,description:param.description}}0===$scope.vars.length?$scope.renderGraphs(total_num,row_num):$scope.genVars($scope.per_row)}}]),angular.module("simulations").controller("SimulationController",["$scope","$stateParams","$location","Authentication","Simulations","$anchorScroll",function($scope,$stateParams,$location,Authentication,Simulations,$anchorScroll){$scope.authentication=Authentication,$scope.selectedIndex=0,void 0===$stateParams.simulationId&&$location.path("/simulations"),$scope.findOne=function(){$scope.simulation=Simulations.get({simulationId:$stateParams.simulationId},function(){$scope.breadcrumbs=[{title:"Simulations",link:"/#!/"},{title:$scope.simulation.name,link:"/#!/simulations/"+$scope.simulation._id}]})},$scope.goToAnchor=function(anch){var old=$location.hash();$location.hash(anch),$anchorScroll(),$location.hash(old)}}]),angular.module("simulations").controller("ListSimulationsController",["$scope","$http","$mdDialog","$stateParams","$location","Authentication","Simulations","$anchorScroll","Models",function($scope,$http,$mdDialog,$stateParams,$location,Authentication,Simulations,$anchorScroll,Models){$scope.authentication=Authentication,$scope.selectedIndex=0,$scope.goToAnchor=function(anch){$location.hash(anch),$anchorScroll()},$scope.breadcrumbs=[{title:"Simulations",link:"/#!/"}],$scope.create=function(){var simulation=new Simulations({name:this.simulation.name,model:this.simulation.model});simulation.$save(function(response){$location.path("simulations/"+response._id)},function(errorResponse){console.log(errorResponse.data.message),$scope.error=errorResponse.data.message}),$mdDialog.cancel()},$scope.remove=function(simulation){$http["delete"]("/simulations/"+simulation._id).success(function(data,status,headers,config){for(var group in $scope.groupedSimulations)for(var sim in $scope.groupedSimulations[group].simulations)simulation===$scope.groupedSimulations[group].simulations[sim]&&($scope.groupedSimulations[group].simulations.splice(sim,1),0===$scope.groupedSimulations[group].simulations.length&&$scope.groupedSimulations.splice(group,1))}).error(function(data,status,headers,config){console.log(status)})},$scope.update=function(){var simulation=$scope.simulation,obj={_id:simulation._id,parameters:simulation.parameters,shocks:simulation.shocks};Simulations.update(obj,function(){},function(errorResponse){console.log(errorResponse.data.message),$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.groupedSimulations=Simulations.query()},$scope.findModels=function(){$scope.models=Models.query()},$scope.newSimulation=function(ev){$mdDialog.show({templateUrl:"/modules/simulations/views/create-simulation.client.view.html",targetEvent:ev})}}]),angular.module("simulations").controller("ParametersSimulationController",["$scope","$http","$mdDialog","$stateParams","$location","Authentication","Simulations","Models","Socket","$anchorScroll",function($scope,$http,$mdDialog,$stateParams,$location,Authentication,Simulations,Models,Socket,$anchorScroll){$scope.authentication=Authentication,$scope.selectedIndex=1,void 0===$stateParams.simulationId&&$location.path("/simulations"),$scope.update=function(){var simulation=$scope.simulation,obj={_id:simulation._id,parameters:simulation.parameters,dsf:simulation.dsf};Simulations.update(obj,function(){},function(errorResponse){console.log(errorResponse.data.message),$scope.error=errorResponse.data.message})},$scope.findOne=function(){$scope.simulation=Simulations.get({simulationId:$stateParams.simulationId},function(){$scope.breadcrumbs=[{title:"Simulations",link:"/#!/"},{title:$scope.simulation.name,link:"/#!/simulations/"+$scope.simulation._id}]}),$scope.editingDSF=!1},$scope.editParam=function(parameter){$scope.selectedParameter=parameter,$scope.editingDSF=!1},$scope.useDefaultValue=function(){$scope.selectedParameter.value=$scope.selectedParameter.default_value},$scope.toggleDSF=function(){$scope.editingDSF=!$scope.editingDSF,$scope.selectedParameter=null},$scope.goToRun=function(){var path="/simulations/"+$scope.simulation._id+"/run";$location.path(path)},$scope.$on("$destroy",function(){$scope.update()})}]),angular.module("simulations").controller("RunSimulationController",["$scope","$stateParams","$location","$anchorScroll","Authentication","SimulationState","Simulations",function($scope,$stateParams,$location,$anchorScroll,Authentication,SimulationState,Simulations){$scope.authentication=Authentication,$scope.selectedIndex=3,void 0===$stateParams.simulationId&&$location.path("/simulations"),$scope.output="",$scope.canExport=!1,$scope.update=function(){var simulation=$scope.simulation,obj={_id:simulation._id,log:simulation.log};console.log("@ obj ",obj),console.log("@ sim log ",simulation.log),Simulations.update(obj,function(){},function(errorResponse){console.log(errorResponse.data.message),$scope.error=errorResponse.data.message})},$scope.findOne=function(){$scope.simulation=Simulations.get({simulationId:$stateParams.simulationId},function(){$scope.breadcrumbs=[{title:"Simulations",link:"/#!/"},{title:$scope.simulation.name,link:"/#!/simulations/"+$scope.simulation._id}]})},$scope.runSimulation=function(){console.log("pushing new log!"),$scope.simulation.log.push({date:Date.now(),status:"Running",info:""}),SimulationState().runSimulation($stateParams.simulationId,function(data,status,headers,config){},function(data,status,headers,config){},function(data){$scope.output+=data;var old=$location.hash();$location.hash("bottom"),$anchorScroll(),$location.hash(old)},function(){$scope.canExport=!0;var old=$location.hash();$location.hash("bottom"),$anchorScroll(),$location.hash(old)},function(text){$scope.simulation.log[$scope.simulation.log.length-1].status=text,console.log("updating status in sim's log"),$scope.update()})}}]),angular.module("simulations").controller("ShocksSimulationController",["$scope","$http","$mdDialog","$stateParams","$location","Authentication","Simulations","Models","Socket","$anchorScroll",function($scope,$http,$mdDialog,$stateParams,$location,Authentication,Simulations,Models,Socket,$anchorScroll){$scope.authentication=Authentication,$scope.selectedIndex=2,void 0===$stateParams.simulationId&&$location.path("/simulations"),$scope.isShocksNew=!1,$scope.editable=!1,$scope.ToggleEdit=function(){$scope.editable=!$scope.editable},$scope.update=function(){var simulation=$scope.simulation,obj={_id:simulation._id,shocks:simulation.shocks};Simulations.update(obj,function(){},function(errorResponse){console.log(errorResponse.data.message),$scope.error=errorResponse.data.message})},$scope.findOne=function(){$scope.simulation=Simulations.get({simulationId:$stateParams.simulationId},function(){$scope.breadcrumbs=[{title:"Simulations",link:"/#!/"},{title:$scope.simulation.name,link:"/#!/simulations/"+$scope.simulation._id}]})},$scope.goToAnchor=function(anch){console.log(anch),$location.hash(anch),$anchorScroll()},$scope.editShock=function(shock){$scope.selectedShock=shock},$scope.addPeriods=function(shock,num){for(var values=[],i=0;num>i&&10>i;i++)values.push(0);Array.prototype.push.apply(shock.periods,values)},$scope.addRange=function(shock){shock.ranges.push({start:0,end:0,value:0})},$scope.goToRun=function(){var path="/simulations/"+$scope.simulation._id+"/run";$location.path(path)},$scope.$on("$destroy",function(){$scope.update()})}]).filter("hasShockName",function(){return function(items,name){if(void 0===items||void 0===name)return[];for(var filtered=[],i=0;i<items.length;i++)items[i].name===name&&filtered.push(items[i]);return filtered}}),angular.module("simulations").directive("landingPage",function(){return{templateUrl:function(elem,attr){return"/modules/simulations/models/"+attr.modelName+".model.template.html"}}}).directive("omtHeader",function(){return{transclude:!0,templateUrl:function(elem,attr){return"modules/core/views/header.client.view.html"}}}).directive("omTabbar",["$location",function($location){return{transclude:!0,link:function(scope,element,attrs){var tabs=["/simulations/%s","/simulations/%s/edit/parameters","/simulations/%s/edit/shocks","/simulations/%s/run","/simulations/%s/analyze"];scope.changeTab=function(simulationId,idx){$location.path(tabs[idx].replace("%s",simulationId))}},templateUrl:function(elem,attr){return"modules/simulations/views/tabbar.client.view.html"}}}]).directive("mathjaxBind",function(){return{restrict:"A",controller:["$scope","$element","$attrs",function($scope,$element,$attrs){$scope.$watch($attrs.mathjaxBind,function(texExpression){console.log("mathjax-bind");var texScript=angular.element('<script type="math/tex">').html(texExpression?texExpression:"");$element.html(""),$element.append(texScript),MathJax.Hub.Queue(["Reprocess",MathJax.Hub,$element[0]])})}]}}).directive("mathjax",function(){return{restrict:"EA",link:function(scope,element,attrs){MathJax.Hub.Queue(["Typeset",MathJax.Hub])}}}).directive("omSidebar",["$window",function($window){var link=function(scope,element,attrs){element=$(element[0]),element.height($($window).height()-112),element.addClass("om-sidebar")};return{restrict:"EA",link:link}}]).directive("omToolbarlessHeight",["$window",function($window){var link=function(scope,element,attrs){element=$(element[0]),element.height($($window).height()-64)};return{restrict:"EA",link:link}}]).directive("omFillHeight",["$window",function($window){var link=function(scope,element,attrs){element=$(element[0]),element.height($($window).height()-140)};return{restrict:"EA",link:link}}]).filter("capitalize",function(){return function(input,all){return input?input.replace(/([^\W_]+[^\s-]*) */g,function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase()}):""}}),angular.module("simulations").factory("Simulations",["$resource",function($resource){return $resource("simulations/:simulationId",{simulationId:"@_id"},{update:{method:"PUT"}})}]).factory("SimulationState",["$http","Socket",function($http,Socket){return function(){return{runSimulation:function(simulationId,success,error,updates,completion,info){Socket.on("compute."+simulationId,function(data){"on:close:0"===data?(completion(),info("Success")):-1!==data.indexOf("on:close:")?(info("Error"),updates("[ERROR] octave cp returned: "+data+"\n")):updates(data)}),$http.post("/compute/"+simulationId,{}).success(success).error(error)}}}}]).factory("AnalyzeState",["$http",function($http){return{}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication,$mdDialog){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/simulations")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/simulations")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.foo=!0,$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);